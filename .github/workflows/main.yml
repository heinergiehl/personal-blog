name: CI/CD â€“ MyPortfolio
on:
  push:
    branches: [main]
jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      # Change this if your app listens on a different port
      APP_PORT: 3002
    steps:
      # 1) Checkout your repo
      - name: Checkout
        uses: actions/checkout@v3
      # 2) Install Bun
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "latest"
      # 3) (Optional) Create .env.production on the runner
      #    Only include the vars your app actually needs.
      - name: Create .env.production
        run: |
          cat > .env.production <<EOF
          APP_PORT=${{ env.APP_PORT }}
          PRODUCTION=true
          # Add any other secrets here:
          # NEXT_PUBLIC_FOO=${{ secrets.NEXT_PUBLIC_FOO }}
          EOF
      # 4) Install & build
      - name: Install & Build
        run: |
          bun install
          bun run build
      # 5) Prepare SSH key
      - name: Copy SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
      # 6) SSH into VPS and deploy
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo '--- Preflight: ensure GitHub host key ---'
            mkdir -p ~/.ssh
            if ! grep -q github.com ~/.ssh/known_hosts 2>/dev/null; then
              ssh-keyscan -t ed25519 github.com >> ~/.ssh/known_hosts
              chmod 644 ~/.ssh/known_hosts
            fi

            echo '--- Configure SSH for GitHub (use custom key) ---'
            cat > ~/.ssh/config <<EOF
            Host github.com
                HostName github.com
                User git
                IdentityFile ~/.ssh/id_ed25519_canva
                IdentitiesOnly yes
            EOF
            chmod 600 ~/.ssh/config

            echo '--- Environment file ---'
            cat > /var/www/latest-portfolio/.env.production <<EOF
            APP_PORT=${{ env.APP_PORT }}
            PRODUCTION=true
            EOF

            echo '--- Go to project dir ---'
            cd /var/www/latest-portfolio

            if [ ! -d .git ]; then
              echo 'ERROR: /var/www/latest-portfolio is not a git repo. Did you clone it initially?'
              exit 1
            fi

            echo 'Remote URL:'
            git remote -v

            echo '--- Debug: Show public key content ---'
            echo 'Public key that should be in GitHub Deploy Keys:'
            cat ~/.ssh/id_ed25519_canva.pub

            echo ''
            echo '--- Test SSH auth to GitHub ---'
            echo 'Testing SSH connection with verbose output:'
            ssh -T -v git@github.com 2>&1 | head -20

            if ssh -T -o BatchMode=yes git@github.com 2>&1 | grep -qi 'permission denied'; then
              echo 'ERROR: GitHub SSH auth failed. Ensure deploy key public part is added to repo Deploy Keys.'
              echo 'The public key above must be added to: https://github.com/heinergiehl/personal-blog/settings/keys'
              exit 1
            fi

            echo '--- Pull & build ---'
            git fetch origin
            git checkout main
            git pull --ff-only origin main

            echo '--- Verify latest code ---'
            echo 'Latest commit:'
            git log --oneline -1
            echo 'Current branch:'
            git branch --show-current

            bun install

            echo '--- Clear Next.js cache ---'
            rm -rf .next/cache || true

            bun run build

            echo '--- Reload PM2 ---'
            pm2 reload ecosystem.config.js --only blog --env production

            echo '--- Verify PM2 status ---'
            pm2 status
            echo '--- Recent logs ---'
            pm2 logs blog --lines 5 --nostream

            echo '--- Final verification ---'
            echo 'Current commit on server:'
            git log --oneline -1
            echo 'Server time:'
            date
            echo 'Build timestamp:'
            ls -la .next/BUILD_ID 2>/dev/null || echo 'No BUILD_ID found'

            echo '--- Test live server response ---'
            echo 'Testing server response on port 3002:'
            curl -s -I http://localhost:3002 | head -10 || echo 'Curl failed'

            echo '--- Check if HTML contains latest timestamp ---'
            curl -s http://localhost:3002 | grep -i "BUILD TIME" || echo 'No timestamp found in HTML'

            echo '--- Deployment complete! ---'
