name: CI/CD – MyPortfolio

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      # Change if your app listens on a different port
      APP_PORT: 3002
      # Adjust if your remote path/repo differ
      APP_DIR: /var/www/latest-portfolio
      REPO_SSH: git@github.com:heinergiehl/personal-blog.git
      BRANCH: main

    steps:
      # (Checkout not strictly needed since we build on the server, but harmless)
      - name: Checkout
        uses: actions/checkout@v4

      # Deploy & build on the VPS
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -euo pipefail

            echo "==> Ensuring app directory exists: ${APP_DIR}"
            sudo mkdir -p "${APP_DIR}"
            sudo chown -R "${USER}:${USER}" "${APP_DIR}"

            # Set up known_hosts for Git if needed (first-time only)
            mkdir -p ~/.ssh
            touch ~/.ssh/known_hosts
            if ! ssh-keygen -F github.com > /dev/null; then
              echo "==> Adding github.com to known_hosts"
              ssh-keyscan -H github.com >> ~/.ssh/known_hosts
            fi

            if [ -d "${APP_DIR}/.git" ]; then
              echo "==> Repo exists. Fetching latest..."
              cd "${APP_DIR}"
              git remote set-url origin "${REPO_SSH}"
              git fetch --all --prune
              git reset --hard "origin/${BRANCH}"
            else
              echo "==> Cloning repo..."
              git clone --branch "${BRANCH}" "${REPO_SSH}" "${APP_DIR}"
              cd "${APP_DIR}"
            fi

            echo "==> Writing .env.production (before build)"
            cat > .env.production <<EOF
            APP_PORT=${APP_PORT}
            PRODUCTION=true
            # Add any build-time env here, e.g.:
            # NEXT_PUBLIC_FOO=${NEXT_PUBLIC_FOO}
            EOF

            # Ensure Node/npm are available
            if ! command -v node >/dev/null 2>&1; then
              echo "ERROR: Node.js is not installed on the server. Install Node 20 (e.g., via nvm) and re-run." >&2
              exit 1
            fi
            echo "==> Node version: $(node -v)"
            echo "==> NPM version:  $(npm -v)"

            echo "==> Installing dependencies"
            # Using npm install (works even without package-lock.json)
            npm install

            echo "==> Building"
            npm run build

            echo "==> Reloading PM2"
            if pm2 list | grep -q "latest-portfolio"; then
              pm2 reload ecosystem.config.js --only latest-portfolio --env production
            else
              pm2 start ecosystem.config.js --only latest-portfolio --env production
            fi

            pm2 save
            echo "==> Deploy complete ✅"
