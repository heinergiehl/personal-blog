name: CI/CD â€“ MyPortfolio

on:
  push:
    branches: [main]

env:
  APP_NAME: latest-portfolio # PM2 app name
  APP_DIR: /var/www/latest-portfolio # Deploy path on server
  APP_PORT: "3002" # Your app's port (string for env use)

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Setup Bun
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "latest"

      # 3) Create .env.production for the build if your build needs it (optional)
      - name: Create .env.production (build)
        run: |
          cat > .env.production <<EOF
          APP_PORT=${{ env.APP_PORT }}
          PRODUCTION=true
          EOF

      # 4) Install & Build
      - name: Install & Build
        run: |
          bun install
          bun run build

      # 5) Pack deployable artifacts into an archive
      #    Include what's needed to run on the server.
      - name: Pack artifacts
        run: |
          mkdir -p deploy
          # Include Next.js build output and runtime files
          cp -R .next deploy/.next
          cp -R public deploy/public || true
          cp package.json deploy/package.json
          cp bun.lockb deploy/bun.lockb || true
          # PM2 ecosystem config (see file below)
          cp ecosystem.config.js deploy/ecosystem.config.js
          # (Optional) Next config / et al if needed at runtime
          [ -f next.config.js ] && cp next.config.js deploy/next.config.js || true
          # We will write .env.production on the server, not here.
          tar -C deploy -czf release.tgz .

      # 6) Upload archive to server
      - name: Upload release to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "release.tgz"
          target: "/tmp"

      # 7) SSH: unpack to a timestamped release, install prod deps, write env, symlink, reload PM2
      - name: Deploy & Reload on VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -euo pipefail

            APP_NAME="${{ env.APP_NAME }}"
            APP_DIR="${{ env.APP_DIR }}"
            APP_PORT="${{ env.APP_PORT }}"
            RELEASE_DIR="$APP_DIR/releases/$(date +%Y%m%d%H%M%S)"

            # Ensure base dirs exist
            mkdir -p "$APP_DIR/releases"
            mkdir -p "$APP_DIR/shared"

            # Unpack new release
            mkdir -p "$RELEASE_DIR"
            tar -xzf /tmp/release.tgz -C "$RELEASE_DIR"
            rm -f /tmp/release.tgz

            # Ensure bun & pm2 exist (adjust if bun is installed elsewhere)
            if ! command -v bun >/dev/null 2>&1; then
              echo "Bun not found on server. Installing..."
              curl -fsSL https://bun.sh/install | bash
              export BUN_INSTALL="$HOME/.bun"
              export PATH="$BUN_INSTALL/bin:$PATH"
            fi
            if ! command -v pm2 >/dev/null 2>&1; then
              echo "PM2 not found on server. Installing..."
              corepack enable || true
              npm i -g pm2
            fi

            # Write/refresh env file (shared across releases)
            cat > "$APP_DIR/shared/.env.production" <<EOF
            APP_PORT=${APP_PORT}
            PRODUCTION=true
            # Add other secrets as needed, e.g.:
            # NEXT_PUBLIC_FOO=${{ secrets.NEXT_PUBLIC_FOO }}
            EOF

            # Symlink shared env into the release
            ln -sfn "$APP_DIR/shared/.env.production" "$RELEASE_DIR/.env.production"

            # Install production deps for the release
            cd "$RELEASE_DIR"
            bun install --production

            # Atomically switch "current" symlink to the new release
            ln -sfn "$RELEASE_DIR" "$APP_DIR/current"

            # Create runtime dir for PM2 logs (optional)
            mkdir -p "$APP_DIR/shared/logs"

            # Start or reload via PM2
            # If app not started yet, start it; else reload it
            if ! pm2 describe "$APP_NAME" >/dev/null 2>&1; then
              echo "Starting $APP_NAME with PM2..."
              pm2 start ecosystem.config.js --only "$APP_NAME" --env production
            else
              echo "Reloading $APP_NAME with PM2..."
              pm2 reload ecosystem.config.js --only "$APP_NAME" --env production
            fi

            # Save PM2 state (so it resurrects on reboot if you have pm2 startup set)
            pm2 save
